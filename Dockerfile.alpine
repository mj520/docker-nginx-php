FROM php:7.4-fpm-alpine
ENV TZ=Asia/Shanghai
ENV IMAGICK_VERSION=3.4.4
ENV PHALCON_VERSION=3.4.5
ARG MAKEFLAGS=-j8
RUN echo "https://mirrors.aliyun.com/alpine/latest-stable/main" > /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/latest-stable/community" >> /etc/apk/repositories && \
    apk --update add --no-cache && apk add -U tzdata bash && \
    apk add --no-cache nginx nginx-mod-stream shadow inotify-tools && \
    groupmod --gid 81 cdrw && groupmod --gid 80 --new-name www nginx && \
    usermod --uid 80 --home /data/www --gid 80 --login www --shell /sbin/nologin --comment www nginx && \
    echo 'nginx installed.' && nginx -v && apk del shadow && \
    #详见官方build   不指定编译扩展包比较大 # PHPIZE_DEPS=autoconf dpkg-dev dpkg file g++ gcc libc-dev make pkgconf re2c
    apk add --no-cache --virtual .build-deps $PHPIZE_DEPS \
        argon2-dev coreutils curl-dev libedit-dev libsodium-dev libxml2-dev linux-headers oniguruma-dev openssl-dev sqlite-dev \
        zlib-dev libpng-dev librdkafka-dev imagemagick-dev pcre-dev gettext-dev && \ 
    cp ${PHP_INI_DIR}/php.ini-production ${PHP_INI_DIR}/php.ini && \
    export CFLAGS="-fstack-protector-strong -fpic -fpie -O2" && \
    export CPPFLAGS="-fstack-protector-strong -fpic -fpie -O2" && \
    export LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie" && \
    # gd libwebp libjpeg libpng libpng-dev gettext-dev
    docker-php-ext-install -j8 gd pdo_mysql mysqli bcmath exif gettext pcntl sockets && \
    docker-php-ext-enable gd pdo_mysql mysqli bcmath exif gettext pcntl sockets && \
    # redis igbinary
    pecl install -o -f redis igbinary && docker-php-ext-enable redis igbinary && \
    pecl install -o -f swoole && docker-php-ext-enable swoole && \
    pecl install -o -f mongodb && docker-php-ext-enable mongodb && \
    #rdkafka librdkafka librdkafka-dev
    pecl install -o -f rdkafka && docker-php-ext-enable rdkafka  && \
    #grpc protobuf zlib-dev linux-headers https://www.testdoc.cn/grpc-1.27.0.tgz
    pecl install -o -f protobuf grpc && docker-php-ext-enable protobuf grpc  && \
    # phalcon4 pcre-dev php7.4  isn't supported for Phalcon 3.4
    pecl install -o -f psr phalcon && docker-php-ext-enable psr phalcon && \
    # cd /tmp && apk add bash && \
    # curl -SL "https://codeload.github.com/phalcon/cphalcon/tar.gz/v${PHALCON_VERSION}" \
    #     -o /tmp/phalcon.tar.gz && \
    # tar xvf phalcon.tar.gz -C /tmp && \
    # cd "/tmp/cphalcon-${PHALCON_VERSION}/build" && \
    # ./install && \
    # echo 'extension="phalcon.so"' > "${PHP_INI_DIR}/conf.d/phalcon.ini" && \
    #imagick imagemagick-libs imagemagick-c++ imagemagick-dev;pecl install not fount;
    cd /tmp && \
    curl -SL "https://codeload.github.com/Imagick/imagick/tar.gz/${IMAGICK_VERSION}" \
        -o "/tmp/imagick.tar.gz" && \
    tar xvf imagick.tar.gz -C /tmp && \
    cd "/tmp/imagick-${IMAGICK_VERSION}" && \
    phpize && \
    ./configure --with-php-config=`which php-config` && \
    make &&  make install && make clean && \
    docker-php-ext-enable imagick && \
    # composer
    curl -SL "https://mirrors.aliyun.com/composer/composer.phar" -o /usr/local/bin/composer && \
    chmod a+x /usr/local/bin/composer && \
    echo 'composer installed.' && composer --version && \
    composer config -g repo.packagist composer "https://mirrors.aliyun.com/composer/" && \
    echo 'PHP installed.' && php --version && php -m && \
    # runtime package  an clear 先提前在删除
    PHP_RUNTIME_DEPS="$( \
        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
            | tr ',' '\n' \
            | sort -u \
            | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
    )"; \
    apk add --virtual .php-runtime-deps ${PHP_RUNTIME_DEPS} && \
    # 缩小so可执行文件大小 和 清理包
    cd /usr/local/ && { find . -type f -exec strip --strip-all {} + || true; } && \
    apk del --no-network .build-deps && \
    rm -rf /tmp/* ~/.pearrc /usr/local/lib/php/test /usr/src/*
ADD container-files /
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    ln -s ${PHP_INI_DIR}/php.ini /etc/php.ini && mv /etc/php.d/z-php.ini ${PHP_INI_DIR}/conf.d/ && \
    rm -rf /etc/php.d && ln -s ${PHP_INI_DIR}/conf.d /etc/php.d && \
    mkdir -p /data/conf && touch php.ini && ln -s /data/conf/php.ini /etc/php.d/zz.php.ini && \
    echo -e "[inet_http_server]\nport=127.0.0.1:9001\n[include]\nfiles = /etc/supervisord.conf.d/*.conf /data/conf/supervisord.conf.d/*.conf" \
        >> /etc/supervisord.conf && \
    chmod +x /docker-entrypoint.sh /supervisord && mv /supervisord /usr/bin/supervisord && \
    sed -i "1iload_module /usr/lib/nginx/modules/ngx_stream_module.so;"  /etc/nginx/nginx.conf
WORKDIR /data
VOLUME [ "/data" ]
ENTRYPOINT [ "/docker-entrypoint.sh" ]
EXPOSE 80 443 9000
CMD /usr/bin/supervisord -c /etc/supervisord.conf